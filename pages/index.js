import Head from 'next/head'
import { useState, useEffect, useRef } from 'react';
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { CUIAutoComplete } from "chakra-ui-autocomplete";
import {
  Box,
  Button,
  AlertDialog,
  AlertDialogBody,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogContent,
  AlertDialogOverlay,
  AlertDialogCloseButton,
  useDisclosure
} from "@chakra-ui/react";
import { motion } from 'framer-motion';
import Countdown from 'react-countdown';
import moment from 'moment';
import { useCookies } from 'react-cookie';
import useSWR from 'swr';

const fetcher = async (url) => await fetch(url).then((res) => res.json());

export default function Home() {

  const [brand, setBrand] = useState([]);
  const [brandErrors, setBrandErrors] = useState([]);
  const [brandList, setBrandList] = useState([])
  const [blurpx, setBlurpx] = useState(40);
  const [cookies, setCookie, removeCookie] = useCookies(['wins']);
  const { isOpen, onOpen, onClose } = useDisclosure()
  const [wins, setWins] = useState(false);
  const { data, error } = useSWR('/api/getFiles', fetcher);

  const correctBrand = "bmw";
  removeCookie("wins")

  useEffect(() => {

    if (cookies.wins) {
      if (moment(cookies.winTime).format('DD.MM.YYYY') !== moment().format('DD.MM.YYYY')) {
        setCookie('wins', false, { path: '/' });
        setWins(false)
        console.log(cookies.wins)
      } else {
        setWins(true)
      }
    }
  }, [])

  useEffect(() => {
    if (data) {
      setBrandList(data)
    }
  }, [data])

  const handleSubmit = () => {
    {
      if (brand[0].value === correctBrand) {
        setBlurpx(0)
        setBrandErrors([])
        setCookie('wins', true, { path: '/' });
        setCookie('winTime', moment(), { path: '/' })
        setWins(true)
        onOpen()
      } else {
        setBrandList(brandList.filter((item) => item !== brand[0]))
        setBrandErrors([...brandErrors, brand[0]])
        setBrand([])
        setBlurpx(blurpx - 10)
      }

    }
  }

  return (
    <motion.div
      initial="hidden"
      animate="visible"
      variants={{
        hidden: {
          scale: .8,
          opacity: 0
        },
        visible: {
          scale: 1,
          opacity: 1,
          transition: {
            delay: .4
          }
        },
      }} className={styles.container}>
      <Head>
        <title>Brandle</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h2><i>guess the</i></h2>

        <h2 className={styles.title}>
          Brand<b className={styles.le}>!e</b>
        </h2>

        {!wins ? <Box>
          <Box p={3}>
            <Image
              src={"/static/" + correctBrand + ".png"}
              alt="brand"
              width={400}
              height={400}
              style={{
                backgroundColor: "#FFF",
                filter: `blur(${blurpx}px)`,
                transition: "1s",
                borderRadius: "1rem",
              }} />
          </Box>

          <Box px={8} py={4} className={styles.box} display='grid'>
            {brandErrors.map((error) =>
              <motion.div
                key={error.value}
                initial="hidden"
                animate="visible"
                variants={{
                  hidden: {
                    scale: .8,
                    opacity: 0
                  },
                  visible: {
                    scale: 1,
                    opacity: 1,
                    transition: {
                      delay: .3
                    }
                  },
                }}
              >
                <Box className={styles.highlight} bg='red.400' p={2} marginBottom={2} borderRadius='0.5rem' key={error}>
                  <i>Error:{error.label}</i>
                </Box>
              </motion.div>
            )}
            <CUIAutoComplete
              placeholder="Type and select the brand name"
              items={brandList}
              listStyleProps={{
                bg: 'gray.700', pt: '4'
              }}
              tagStyleProps={{
                display: "none",
              }}
              highlightItemBg="gray.400"
              selectedItems={brand}
              onSelectedItemsChange={(changes) => {
                console.log(changes)
                if (changes.selectedItems.length > 0) {
                  setBrand([changes.selectedItems.at(-1)])
                }
              }}
              activeIndex={0}
              disableCreateItem
              hideToggleButton
            />
            <Button
              bg="green.500"
              onClick={handleSubmit}
              disabled={brand.length === 0}
            >Submit</Button>
          </Box>
        </Box> :
          <Box>
            <Box p={3} textAlign="center">
              The brand was <b>{correctBrand}</b>:
            </Box>
            <Box p={3}>
              <Image
                src={"/static/" + correctBrand + ".png"}
                alt="brand"
                width={400}
                height={400}
                style={{
                  backgroundColor: "#FFF",
                  borderRadius: "1rem",
                }} />
            </Box>
            <Box p={3}>
              The new brand appears in: <Countdown className={styles.countdown} date={moment().endOf('day')} />
            </Box>
          </Box>
        }
      </main>

      <footer className={styles.footer}>
        <a
          href="https://www.linkedin.com/in/guilherme-waizbart/"
          target="_blank"
          rel="noopener noreferrer"
        >
          By Guilherme Waizbart
        </a>
      </footer>
      <AlertDialog
        motionPreset='slideInBottom'
        onClose={onClose}
        isOpen={isOpen}
        isCentered
      >
        <AlertDialogOverlay />

        <AlertDialogContent>
          <AlertDialogHeader>Congratulations! :)</AlertDialogHeader>
          <AlertDialogCloseButton />
          <AlertDialogBody>
            <Box p={2}>
              The brand is <b><i>{correctBrand}</i></b>
            </Box>
            <Box p={2}>
              The new brand appears in: <Countdown className={styles.countdown} date={moment().endOf('day')} />
            </Box>
          </AlertDialogBody>
          <AlertDialogFooter>
            <Button onClick={onClose}>
              Ok
            </Button>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </motion.div>
  )
}
